{"componentChunkName":"component---src-templates-docs-template-js","path":"/getstarted/quickstart/","result":{"data":{"markdownRemark":{"html":"<div class=\"DeveloperGuidelines\">\n<h2>Run using Windows Installer</h2>\n<p>The Windows installer is an installation file that contains PostgreSQL 15, Apache AGE 1.4.0, and Graphizer 1.1</p>\n<p>Graphizer is a data modeling tool that allows generating  openCypher graph data with table data in relational databases and CSV files for advanced data analysis and exploration.</p>\n<table>\n<thead>\n<tr>\n<th>Windows Installer</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://agedb.io/downloads/ageplus-pg15-1.4.0-2-windows-x64.zip\" onclick=\"gtag('event', 'click', {'event_category': 'Category', 'event_label': '윈도우인스톨러다운수'});\">Download Windows Installer ➚</a></td>\n</tr>\n</tbody>\n</table>\n<br>\n<p>✅ Please give feedback about the installer at the <a href=\"https://github.com/apache/age/discussions/1712\"><strong>GitHub Discussion #1712</strong></a>.</p>\n<h2>Run using Docker</h2>\n<ul>\n<li>Get the docker image</li>\n</ul>\n<pre><code>docker pull apache/age\n</code></pre>\n<ul>\n<li>Create AGE docker container</li>\n</ul>\n<pre><code>docker run \\\n--name age  \\\n-p 5455:5432 \\\n-e POSTGRES_USER=postgresUser \\\n-e POSTGRES_PASSWORD=postgresPW \\\n-e POSTGRES_DB=postgresDB \\\n-d \\\napache/age\n</code></pre>\n<ul>\n<li>Enter PostgreSQL's psql:</li>\n</ul>\n<pre><code>docker exec -it age psql -d postgresDB -U postgresUser\n</code></pre>\n<h2>Post Installation</h2>\n<ul>\n<li>For every connection of AGE you start, you will need to load the AGE extension.</li>\n</ul>\n<pre><code>CREATE EXTENSION age;\n</code></pre>\n<pre><code>LOAD 'age';\n</code></pre>\n<pre><code> SET search_path = ag_catalog, \"$user\", public;\n</code></pre>\n<h2>Quick Start</h2>\n<ul>\n<li>To create a graph, use the create_graph function located in the ag_catalog namespace.</li>\n</ul>\n<pre><code>SELECT create_graph('graph_name');\n</code></pre>\n<ul>\n<li>To create a single vertex, use the CREATE clause.</li>\n</ul>\n<pre><code>SELECT * \nFROM cypher('graph_name', $$\n    CREATE (n)\n$$) as (v agtype);\n</code></pre>\n<ul>\n<li>To create a single vertex with the label, use the CREATE clause.</li>\n</ul>\n<pre><code>SELECT * \nFROM cypher('graph_name', $$\n    CREATE (:label)\n$$) as (v agtype);\n</code></pre>\n<ul>\n<li>To query the graph, you can use the MATCH clause.</li>\n</ul>\n<pre><code>SELECT * \nFROM cypher('graph_name', $$\n    MATCH (v)\n    RETURN v\n$$) as (v agtype);\n</code></pre>\n<ul>\n<li>You can use the following to create an edge, for example, between two nodes.</li>\n</ul>\n<pre><code>SELECT * \nFROM cypher('graph_name', $$\n    MATCH (a:label), (b:label)\n    WHERE a.property = 'Node A' AND b.property = 'Node B'\n    CREATE (a)-[e:RELTYPE]->(b)\n    RETURN e\n$$) as (e agtype);\n</code></pre>\n<ul>\n<li>To create an edge and set properties.</li>\n</ul>\n<pre><code>SELECT * \nFROM cypher('graph_name', $$\n    MATCH (a:label), (b:label)\n    WHERE a.property = 'Node A' AND b.property = 'Node B'\n    CREATE (a)-[e:RELTYPE {property:a.property + '&#x3C;->' + b.property}]->(b)\n    RETURN e\n$$) as (e agtype);\n</code></pre>\n<ul>\n<li>Example</li>\n</ul>\n<pre><code>SELECT * \nFROM cypher('graph_name', $$\n    MATCH (a:Person), (b:Person)\n    WHERE a.name = 'Node A' AND b.name = 'Node B'\n    CREATE (a)-[e:RELTYPE {name:a.name + '&#x3C;->' + b.name}]->(b)\n    RETURN e\n$$) as (e agtype);\n</code></pre>\n</div>","frontmatter":{"title":"Quick Start"}}},"pageContext":{"id":"a6559931-683d-581f-adce-f2a05caabee5"}},"staticQueryHashes":["4080856488"]}